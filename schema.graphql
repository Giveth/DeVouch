type ProjectAttestation @entity {
  "UID of the attestation"
  id: ID!
  vouchOrFlag: Boolean!
  txHash: String!
  revoked: Boolean!
  attestorOrganisation: AttestorOrganisation!
  project: Project!
  attestTimestamp: DateTime!
  comment: String
}

type AttestorOrganisation @entity {
  id: ID!
  "UID of the attestation made the relationship"
  uid: String!
  attestor: Attestor!
  organisation: Organisation!
  "Timestamp at which the relationship was created"
  attestTimestamp: DateTime!
  revoked: Boolean!
}

type Attestor @entity {
  "Attestor ID - account address"
  id: ID!
  "Attestor Organization"
  organizations: [AttestorOrganisation!]! @derivedFrom(field: "attestor")
}

type Organisation @entity {
  "Organization schema UID"
  id: ID!
  "Organization Name"
  name: String! @index @unique
  "Schema field holding the authorized user account address"
  schemaUserField: String!
  "Issuing authority address"
  issuer: String!
  "Color of the organization"
  color: String
  "Organization Attestors"
  attestors: [AttestorOrganisation!]! @derivedFrom(field: "organisation")
}

type Project @entity {
  "Project Source and Project ID separated by a hyphen"
  id: ID!
  "Source of the project"
  source: String!
  "Project ID. Unique within the source"
  projectId: String!
  "Title of the project"
  title: String
  "Description of the project"
  description: String
  "Total attests with value True"
  totalVouches: Int!
  "Total attests with value False"
  totalFlags: Int!
  # givbackEligibleTrue: Int!
  # givbackEligibleFalse: Int!
  lastUpdatedTimestamp: DateTime!
  attests: [ProjectAttestation!]! @derivedFrom(field: "project")
}
