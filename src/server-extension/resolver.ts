import { Query, Resolver } from "type-graphql";
import type { EntityManager } from "typeorm";
import { Project } from "../model"; // This is the entity generated by Subsquid
import "reflect-metadata";
import { ProjectType } from "./types";

@Resolver()
export class ProjectResolver {
  constructor(private tx: () => Promise<EntityManager>) {}

  @Query(() => [ProjectType])
  async getProjects(): Promise<ProjectType[]> {
    try {
      const manager = await this.tx();
      const projects = await manager.getRepository(Project).find();

      // Manually map the Project entity to the ProjectType
      return projects.map((project) => ({
        id: project.id,
        title: project.title as string, // Casting explicitly
        description: project.description as string,
        totalVouches: project.totalVouches,
        totalFlags: project.totalFlags,
        totalAttests: project.totalAttests,
        url: project.url as string,
        image: project.image as string,
      }));
    } catch (error) {
      console.error("Error fetching projects:", error);
      throw new Error("Failed to fetch projects");
    }
  }
}
